Team22:
Jinjun Liu    email: jliu788@gatech.edu
Zijian Xie    email: zxie86@gatech.edu
Hui Xia       email: hxia40@gatech.edu
Chen Zhang    email: czhang613@gatech.edu

Credit:
We used some codes and materials from GTOnline template.
The cartoon car on the logo image is from: http://www.sclance.com/pngs/car-cartoon-png/view-page-2.htm
Website icon made by Freepik from www.flaticon.com is licensed by CC 3.0 BY.




view_average_time_in_inventory_report.php include below SQL queries:

1. Query to generate the Average Time in Inventory Report. 

SELECT vehicletype.type_name AS AAA, IFNULL(otbl.average_time_in_inventory, 'N/A') AS BBB 
FROM vehicletype LEFT JOIN (
	SELECT Vehicle.type_name AS type_name, 
	ROUND(AVG(tbl.dateDiff),1) AS average_time_in_inventory 
	FROM (SELECT Sell.vin AS vin, DATEDIFF(Sell.sale_date, Buy.purchase_date) AS dateDiff 
		FROM Sell LEFT JOIN Buy ON Sell.vin = Buy.vin
		WHERE Buy.purchase_date IS NOT NULL AND Sell.sale_date IS NOT NULL)tbl 
	LEFT JOIN Vehicle ON Vehicle.vin = tbl.vin 
	GROUP BY Vehicle.type_name 
	ORDER BY Vehicle.type_name)otbl
ON vehicletype.type_name = otbl.type_name;


view_inventory_age_report.php include below SQL queries:

1. Query to generate the Inventory Age Report. 

SELECT VehicleType.type_name, IFNULL(avg_inventory_age,'N/A') AS avginventoryage,
IFNULL(max_inventory_age, 'N/A') AS maxinventoryage, IFNULL(min_inventory_age, 'N/A') AS mininventoryage
FROM VehicleType LEFT JOIN (
	SELECT Vehicle.type_name,
	ROUND(AVG(DATEDIFF(CURRENT_DATE, Buy.purchase_date)),1) AS avg_inventory_age,
	MAX(DATEDIFF(CURRENT_DATE, Buy.purchase_date)) AS max_inventory_age,
	MIN(DATEDIFF(CURRENT_DATE, Buy.purchase_date)) AS min_inventory_age
	FROM Vehicle LEFT OUTER JOIN Buy ON Vehicle.vin = Buy.vin
	RIGHT JOIN VehicleType ON Vehicle.type_name = VehicleType .type_name
	WHERE Vehicle.vin NOT IN (SELECT Sell .vin FROM Sell)
	GROUP BY Vehicle .type_name)tbl
ON VehicleType.type_name = tbl.type_name
ORDER BY tbl.type_name;


view_price_per_condition_report.php include below SQL queries:

1. Query to generate the Price per Condition Report. 

SELECT vehicle_type,
COALESCE(ROUND(AVG(CASE WHEN Vehicle_Condition = 'Excellent' THEN ROUND(Purchase_price,0) ELSE null END),1),0.0) As excellent,
COALESCE(ROUND(AVG(CASE WHEN Vehicle_Condition = 'Very Good' THEN Purchase_price ELSE null END),1),0.0) As very_good, 
COALESCE(ROUND(AVG(CASE WHEN Vehicle_Condition = 'Good' THEN Purchase_price ELSE null END),1),0.0) As good,
COALESCE(ROUND(AVG(CASE WHEN Vehicle_Condition = 'Fair' THEN Purchase_price ELSE null END),1),0.0) As fair
FROM (
	SELECT Vehicle .vin AS VIN, Vehicle .type_name AS vehicle_type,
	COALESCE(Buy.Purchase_price, 0) AS Purchase_price, Buy.purchase_condition AS Vehicle_Condition
	FROM Vehicle JOIN Buy ON Buy .vin = Vehicle .vin)Vehicle_Sales_Table
GROUP BY vehicle_type
ORDER BY vehicle_type;


view_repair_statistics_report.php include below SQL queries:

1. Query to generate the Repair Statistics Report. 

SELECT Repair.vendor_name, 
COUNT(Repair.vendor_name) AS num_of_repairs, 
SUM(Repair.repair_cost) AS total_repair_cost, 
ROUND(AVG(rep_ven.rep_times),1) AS avg_repair_per_vehicle, 
CEILING(AVG(DAY(Repair.end_date) - DAY(Repair.start_date))) AS avg_time_per_repair 
FROM Repair JOIN (
	SELECT Repair.vin, 
	Repair.vendor_name, 
	COUNT(*) AS rep_times 
	FROM Repair 
	GROUP BY Repair.vin,Repair.vendor_name )rep_ven 
ON Repair.vin = rep_ven.vin 
WHERE Repair.repair_status = 'completed' 
GROUP BY Repair.vendor_name 
ORDER BY Repair.vendor_name;


view_seller_history_report.php include below SQL queries:

1. Query to generate the Seller History Report. 

SELECT sellernames.name, 
COUNT(Buy .vin) AS total_vehicle_number_sold_to_us, 
ROUND(AVG(repaircounts.number_of_repair_for_this_vehicle),1) AS repairs_per_vehicle, 
ROUND(AVG(Buy.purchase_price),2) AS avg_purchase_price 
FROM Buy 
	LEFT OUTER JOIN ( 
	SELECT Buy.vin, 
	COUNT(repair.vin) as number_of_repair_for_this_vehicle 
	FROM Buy LEFT OUTER 
	JOIN Repair 
	ON Buy.vin = Repair.vin 
	GROUP BY Buy.vin)repaircounts 
ON Buy.vin = repaircounts.vin 
JOIN ( 
	SELECT customer_id, 
	CONCAT(customer_first_name, ' ', customer_last_name) AS name 
	FROM Person 
	UNION 
	SELECT customer_id, 
	business_name AS name 
	FROM Business)sellernames 
ON Buy.customer_id = sellernames.customer_id 
GROUP BY sellernames.name;


view_monthly_sales_report.php include below SQL queries:

1. Query to generate the Yearly Sales Report. 

SELECT
YEAR(Sell.sale_date) AS sale_year,
COUNT( Sell .vin) AS num_of_vehicle_sold,
SUM( Vehicle .sale_price) AS total_sale_income,
(SUM( Vehicle .sale_price)- SUM( Buy .purchase_price) - SUM(repairsum.totalrepaircost)) AS net_income
FROM Sell
JOIN Vehicle
ON Vehicle .vin = Sell .vin
JOIN Buy
ON Sell .vin = Buy .vin
JOIN (
	SELECT Repair.vin,
	SUM(Repair.repair_cost) AS totalrepaircost
	FROM Repair
	GROUP BY Repair.vin)repairsum
ON Sell .vin = repairsum.vin
GROUP BY Sale_year
ORDER BY Sale_year DESC;

2. Query to generate the Monthly Sales Report. 

SELECT
CONCAT(YEAR(Sell.sale_date), '-', MONTH(Sell.sale_date)) AS sale_month, 
COUNT( Sell .vin) AS num_of_vehicle_sold,
SUM( Vehicle .sale_price) AS total_sale_income,
(SUM( Vehicle .sale_price)- SUM( Buy .purchase_price) - SUM(repairsum.totalrepaircost)) AS net_income
FROM Sell
JOIN Vehicle
ON Vehicle .vin = Sell .vin
JOIN Buy
ON Sell .vin = Buy .vin
JOIN (
	SELECT Repair.vin,
	SUM(Repair.repair_cost) AS totalrepaircost
	FROM Repair
	GROUP BY Repair.vin)repairsum
ON Sell .vin = repairsum.vin
GROUP BY Sale_month
ORDER BY Sale_month DESC;


view_detailed_yearly_report.php include below SQL queries:

1. Query to generate the Detailed Yearly Sales Report. 

SELECT MAX(Users.login_first_name) AS top_seller_first_name, 
MAX(Users.login_last_name) AS top_seller_last_name, 
COUNT(Sell.vin) AS num_vehicle_sold, 
SUM(Vehicle.sale_price) AS total_sales 
FROM Sell 
JOIN Vehicle 
ON Vehicle.vin = Sell.vin 
JOIN Salesperson 
ON Sell.salesperson_permission = Salesperson.salesperson_permission 
JOIN Users 
ON Salesperson.username = Users.username 
WHERE YEAR(Sell.sale_date) = '{$_POST["yearly"]}' 
GROUP BY Salesperson.username 
ORDER BY num_vehicle_sold DESC, total_sales DESC ;


view_detailed_monthly_report.php include below SQL queries:

1. Query to generate the Detailed Monthly Sales Report. 

SELECT MAX(Users.login_first_name) AS top_seller_first_name, 
MAX(Users.login_last_name) AS top_seller_last_name, 
COUNT(Sell.vin) AS num_vehicle_sold, 
SUM(Vehicle.sale_price) AS total_sales 
FROM Sell 
JOIN Vehicle 
ON Vehicle.vin = Sell.vin 
JOIN Salesperson 
ON Sell.salesperson_permission = Salesperson.salesperson_permission 
JOIN Users 
ON Salesperson.username = Users.username 
WHERE CONCAT(YEAR(Sell.sale_date), '-', MONTH(Sell.sale_date)) = '{$_POST["monthly"]}'
GROUP BY Salesperson.username 
ORDER BY num_vehicle_sold DESC, total_sales DESC ;

#Vehicle Table, Buy Table, Repair Table and Recall Table queries for View, Delete, Add and Edit.

#Find out the repair_status for the given Vin and the repair status is not 'completed', so we could judge whether we could add or delete/edit a repair history
SELECT repair_status from Repair WHERE vin = '$enteredVin' AND repair_status != 'completed'


#Add a new tuple into the Repair table
INSERT INTO Repair (vin, start_date, repair_status, repair_description, vendor_name, repair_cost, inventory_clerk_permission, end_date)"
            ."VALUES('$enteredVin', '$enteredStart_date', '$enteredRepair_status', ".
        "'$enteredRepair_Description', '$enteredVendor_name', '$enteredRepair_cost',".
        "'$enteredInventory_clerk_permssion', '$enteredEnd_date');

#Update the sale price for the vehicle because we add a repair.
UPDATE Vehicle SET sale_price = $new_sale_price WHERE vin = '$enteredVin';


#Find out the repair status from the Repair Table by the given Vin and the start date, and the repair status is completed, so we could judge whether we could add or delete/edit a repair history
SELECT repair_status from Repair WHERE vin = '$enteredVin' AND start_date = '$enteredStart_date' AND repair_status == 'completed';

#Delete a tuple from Repair by the given vin and start date
DELETE FROM Repair WHERE vin = '$vin' AND start_date = '$start_date' ;

#Add a new tuple into the Recall Table.
INSERT INTO Recall VALUES('$enteredrecall_manufacturer','$enteredrecall_description','$enteredNHTSA_recall_compaign_number');


#Add a new tuple into the Buy Table, a new Purchase record.
INSERT INTO Buy (vin, customer_id, inventory_clerk_permission, purchase_date, purchase_price, purchase_condition, KBB_value) "
            ." VALUES('$enteredVin', '$enteredCustomer_id', '$enteredInventory_clerk_permission', '$enteredPurchase_date', $enteredPurchase_price, ".
        "' $enteredPurchase_condition', $enteredKBB_value ) 

#Add a new tuple into the Vehicle Table, a new Vehicle information.
INSERT INTO Vehicle ".
        "VALUES('$enteredVin', $enteredvehicle_mileage, '$enteredvehicle_description', ".
        "'$enteredmodel_name', $enteredmodel_year, '$enteredtype_name',".
        "'$enteredmanufacturer_name', $sale_new_price );

#Delete a tuple from Buy Table with the given Vin.
DELETE FROM Buy WHERE vin = $enteredVin;

#Update the Buy table for the given vin, and set the customer_id to the enteredCustomer_id
UPDATE Buy SET customer_id = '$enteredCustomer_id' WHERE vin = '$enteredVin';

#Update the Buy table for the given vin, and set the inventory_clerk_permission to the enteredInventory_clerk_permission
UPDATE Buy SET inventory_clerk_permission = '$enteredInventory_clerk_permission' WHERE vin = '$enteredVin';

#Update the Buy table for the given vin, and set the purchase_date to the enteredPurchase_date
UPDATE Buy SET purchase_date = '$enteredPurchase_date' WHERE vin = '$enteredVin';

#Update the Buy table for the given vin, and set the purchase_condition to the enteredPurchase_condition
UPDATE Buy SET purchase_condition = '$enteredPurchase_condition' WHERE vin = '$enteredVin';

#Update the Buy table for the given vin, and set the KBB_value to the enteredKBB_value
UPDATE Buy SET KBB_value = '$enteredKBB_value' WHERE vin = '$enteredVin';

#Delete a tuple from Recall Table with the given NHTSA_recall_compaign_number.
DELETE FROM Recall WHERE NHTSA_recall_compaign_number = $enteredNHTSA_recall_compaign_number;

#Delete a tuple from Vehicle Table with the given Vin.
DELETE FROM Vehicle WHERE vin = $vin;

#Update the recall_manufacturer to $enteredrecall_manufacturer in the Recall table by the given NHTSA_recall_compaign_number
UPDATE Recall SET recall_manufacturer = '$enteredrecall_manufacturer' WHERE NHTSA_recall_compaign_number = '$enteredNHTSA_recall_compaign_number'

#Update the recall_description to $enteredrecall_description in the Recall table by the given NHTSA_recall_compaign_number
UPDATE Recall SET recall_description = '$enteredrecall_description' WHERE NHTSA_recall_compaign_number = '$enteredNHTSA_recall_compaign_number';

#Update the vehicle_mileage to $enteredvehicle_mileage in the Vehicle table by the given enteredVin
UPDATE Vehicle SET vehicle_mileage = '$enteredvehicle_mileage' WHERE vin = '$enteredVin';

#Update the vehicle_description to $enteredvehicle_description in the Vehicle table by the given enteredVin
UPDATE Vehicle SET vehicle_description = '$enteredvehicle_description' WHERE vin = '$enteredVin';


#Update the model_name to $enteredmodel_name in the Vehicle table by the given enteredVin
UPDATE Vehicle SET model_name = '$enteredmodel_name' WHERE vin = '$enteredVin'


#Update the model_year to $enteredmodel_year in the Vehicle table by the given enteredVin
UPDATE Vehicle SET model_year = '$enteredmodel_year' WHERE vin = '$enteredVin';

#Update the model_year to $enteredmodel_year in the Vehicle table by the given enteredVin
UPDATE Vehicle SET manufacturer_name = '$enteredmanufacturer_name' WHERE vin = '$enteredVin'


#Update the sale_price to $new_sale_price in the Vehicle table by the given enteredVin
UPDATE Vehicle  SET sale_price = $new_sale_price WHERE vin = '$enteredVin';

#Update the purchase_price to $enteredsale_price in the Buy table by the given enteredVin
UPDATE Buy SET purchase_price = $enteredsale_price WHERE vin = '$enteredVin';

#Pull all columns informations the Buy ordered by purchase_date desc
SELECT * FROM Buy ORDER BY purchase_date DESC;

#Pull recall_manufacturer, recall_description, NHTSA_recall_compaign_number from recall table by the given enteredNHTSA_recall_compaign_number
SELECT recall_manufacturer, recall_description, NHTSA_recall_compaign_number FROM Recall WHERE NHTSA_recall_compaign_number = '$enteredNHTSA_recall_compaign_number';

# get the Repair information by the given conditions.
SELECT vin, start_date, end_date, repair_status, repair_description, vendor_name, repair_cost, nhtsa_recall_compaign_number, inventory_clerk_permission 
FROM Repair 
WHERE vin = $enteredVin AND start_date = '$enteredStart_date' AND end_date = '$enteredEnd_date'  AND repair_status = '$enteredRepair_status' 
AND repair_description = '$enteredRepair_Description'  AND vendor_name = '$enteredVendor_name'  AND repair_cost = '$enteredRepair_cost' 
AND nhtsa_recall_compaign_number = '$enteredNHTSA_recall_campagin_Number'  AND inventory_clerk_permission = '$enteredInventory_clerk_permssion' 

#Get the vehicle information by the given vin number
SELECT vin, vehicle_mileage, vehicle_description, model_name, model_year, type_name, manufacturer_name, sale_price
FROM Vehicle 
WHERE vin = '$enteredVin' ;

#Get all repair status equals to 'completed' and the vin number is $enteredVin and start_date is $enteredStart_date from Repair Table
SELECT repair_status from Repair WHERE vin = '$enteredVin' AND start_date = '$enteredStart_date' AND repair_status == 'completed' ;

#update end date information in Repair table.
UPDATE Repair SET end_date = '$enteredEnd_date' WHERE vin = '$enteredVin' AND start_date = '$enteredStart_date'

#update repair_status information in Repair table.
UPDATE Repair SET repair_status = '$enteredRepair_status' WHERE vin = '$enteredVin' AND start_date = '$enteredStart_date';

#update repair_description information in Repair table.
UPDATE Repair SET repair_description = '$enteredRepair_Description' WHERE vin = '$enteredVin' AND start_date = '$enteredStart_date';

#update vendor_name information in Repair table.
UPDATE Repair SET vendor_name = '$enteredVendor_name' WHERE vin = '$enteredVin'  AND start_date = '$enteredStart_date';

#update repair_cost information in Repair table.
UPDATE Repair SET repair_cost = $enteredRepair_cost WHERE vin = '$enteredVin' AND start_date = '$enteredStart_date';

#update sale_price information in Vehicle table.
UPDATE Vehicle SET sale_price = $new_sale_price WHERE vin = $enteredVin;

#update nhtsa_recall_compaign_number information in Repair table.
UPDATE Repair SET nhtsa_recall_compaign_number = '$enteredNHTSA_recall_campagin_Number' WHERE vin = '$enteredVin' AND start_date = '$enteredStart_date';

#update inventory_clerk_permission information in Repair table.
UPDATE Repair SET inventory_clerk_permission = '$enteredInventory_clerk_permssion' WHERE vin = '$enteredVin' AND start_date = '$enteredStart_date';
